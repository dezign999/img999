var cachedBitmap;
var options = JSON.parse(localStorage.getItem('options'));
if (options === null) 
  options = { "url" : "http://dezign999.com/crop/temp/croppedImg_1407151691.png"};

if (options.url == "") {
	options.url = "http://dezign999.com/crop/temp/croppedImg_1407151691.png"
}

options.url=options.url.trim().replace(/ /g, '%20');

var oldurl = JSON.parse(localStorage.getItem('oldurl'));
if (oldurl === null) 
  oldurl = { "oldurl" : "http://dezign999.com/crop/temp/croppedImg_1407151691.png"};

var CHUNK_SIZE = 1500;
var DOWNLOAD_TIMEOUT = 20000;

//var MessageQueue=function(){var RETRY_MAX=5;var queue=[];var sending=false;var timer=null;return{reset:reset,sendAppMessage:sendAppMessage,size:size};function reset(){queue=[];sending=false}function sendAppMessage(message,ack,nack){if(!isValidMessage(message)){return false}queue.push({message:message,ack:ack||null,nack:nack||null,attempts:0});setTimeout(function(){sendNextMessage()},1);return true}function size(){return queue.length}function isValidMessage(message){if(message!==Object(message)){return false}var keys=Object.keys(message);if(!keys.length){return false}for(var k=0;k<keys.length;k+=1){var validKey=/^[0-9a-zA-Z-_]*$/.test(keys[k]);if(!validKey){return false}var value=message[keys[k]];if(!validValue(value)){return false}}return true;function validValue(value){switch(typeof value){case"string":return true;case"number":return true;case"object":if(toString.call(value)=="[object Array]"||toString.call(value)=="[object Window]"){return true}}return false}}function sendNextMessage(){if(sending){return}var message=queue.shift();if(!message){return}message.attempts+=1;sending=true;Pebble.sendAppMessage(message.message,ack,nack);timer=setTimeout(function(){timeout()},1e3);function ack(){clearTimeout(timer);setTimeout(function(){sending=false;sendNextMessage()},200);if(message.ack){message.ack.apply(null,arguments)}}function nack(){clearTimeout(timer);if(message.attempts<RETRY_MAX){queue.unshift(message);setTimeout(function(){sending=false;sendNextMessage()},200*message.attempts)}else{if(message.nack){message.nack.apply(null,arguments)}}}function timeout(){setTimeout(function(){sending=false;sendNextMessage()},1e3);if(message.ack){message.ack.apply(null,arguments)}}}}();



/*
function sendBitmap(bitmap){
  var i = 0;
  var nextSize = bitmap.length-i > CHUNK_SIZE ? CHUNK_SIZE : bitmap.length-i;
  var sliced = bitmap.slice(i, i + nextSize);

  var success = function(){
    if(i>=bitmap.length)
      return;
    i += nextSize;
    //console.log(i + "/" + bitmap.length);
    nextSize = bitmap.length-i > CHUNK_SIZE ? CHUNK_SIZE : bitmap.length-i;
    sliced = bitmap.slice(i, i + nextSize);
    sendMessage(
      {
      "index":i,
      "chunk":sliced
      },
      success,
      null
      );
  };

  // var error = function(){
  //   sendMessage(
  //     {
  //     "index":i,
  //     "chunk":sliced
  //     },
  //     success,
  //     error
  //     );
  // }

  sendMessage(
      {
      "index":i,
      "chunk":sliced
      },
      success,
      null
      );
}
*/

function sendBitmap(bitmap){
  var i = 0;
  var nextSize = bitmap.length-i > CHUNK_SIZE ? CHUNK_SIZE : bitmap.length-i;
  var sliced = bitmap.slice(i, i + nextSize);

  sendMessage({"size": bitmap.length});

  var success = function(){
    if(i>=bitmap.length)
      return;
    i += nextSize;
    console.log(i + "/" + bitmap.length);
    nextSize = bitmap.length-i > CHUNK_SIZE ? CHUNK_SIZE : bitmap.length-i;
    sliced = bitmap.slice(i, i + nextSize);
   sendMessage(
      {
      "index":i,
      "chunk":sliced
      },
      success,
      null
      );
  };

  sendMessage(
      {
      "index":i,
      "chunk":sliced
      },
      success,
      null
      );
}

/*
function convertImage(rgbaPixels, numComponents, width, height){
  //var grey_pixels = greyScale(rgbaPixels, width, height, numComponents);

  var ratio = Math.min(144 / width,168 / height);
  var ratio = Math.min(ratio,1);

  var final_width = Math.floor(width * ratio);
  var final_height = Math.floor(height * ratio);

  var final_pixels = [];
	var bitmap = [];
  //ScaleRect(final_pixels, grey_pixels, width, height, final_width, final_height);

  //floydSteinberg(final_pixels, final_width, final_height);

  //var bitmap = toPebbleBitmap(final_pixels, final_width, final_height);
	
	ScaleRect(final_pixels, rgbaPixels, width, height, final_width, final_height, numComponents);
	floydSteinberg(final_pixels, final_width, final_height, pebble_nearest_color_to_pebble_palette);
	var png = generatePngForPebble(final_width, final_height, final_pixels);
	for(var i=0; i<png.length; i++){
		bitmap.push(png.charCodeAt(i));
	}

  return bitmap;
}
*/

function convertImage(rgbaPixels, numComponents, width, height){

  var watch_info;
  if(Pebble.getActiveWatchInfo) {
    watch_info = Pebble.getActiveWatchInfo() || { 'platform' : 'aplite'};
  } else {
    watch_info = { 'platform' : 'aplite'};
  }

  //var ratio = Math.min(144 / width,168 / height);
	var ratio = Math.min(180 / width,180 / height);
  var ratio = Math.min(ratio,1);

  var final_width = Math.floor(width * ratio);
  var final_height = Math.floor(height * ratio);
  var final_pixels = [];
  var bitmap = [];

  if(watch_info.platform === 'aplite') {
    var grey_pixels = greyScale(rgbaPixels, width, height, numComponents);
    ScaleRect(final_pixels, grey_pixels, width, height, final_width, final_height, 1);
    floydSteinberg(final_pixels, final_width, final_height, pebble_nearest_color_to_black_white);
    bitmap = toPBI(final_pixels, final_width, final_height);
  }
  else {
    ScaleRect(final_pixels, rgbaPixels, width, height, final_width, final_height, numComponents);
    floydSteinberg(final_pixels, final_width, final_height, pebble_nearest_color_to_pebble_palette);
    var png = generatePngForPebble(final_width, final_height, final_pixels);
    for(var i=0; i<png.length; i++){
      bitmap.push(png.charCodeAt(i));
    }
  }

  return bitmap;
	
	//localStorage.setItem('cachedBitmap', bitmap);
}

function getPbiImage(url){
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function() {
    if(xhr.status == 200 && xhr.response) {
      clearTimeout(xhrTimeout); // got response, no more need in timeout
      var data = new Uint8Array(xhr.response);
      var bitmap = [];
      for(var i=0; i<data.byteLength; i++) {
        bitmap.push(data[i]);
      }
      sendBitmap(bitmap);
    }
  };

  var xhrTimeout = setTimeout(function() {
    sendMessage({"message":"Error : Timeout"}, null, null);
  }, DOWNLOAD_TIMEOUT);

  xhr.send(null);
}

function getGifImage(url){
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function() {
    clearTimeout(xhrTimeout); // got response, no more need in timeout

    sendMessage({"message":"Formatting Image"}, null, null);

    var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);
    var gr = new GifReader(data);
    //console.log("Gif size : "+ gr.width  +" " + gr.height);

    var pixels = [];
    gr.decodeAndBlitFrameRGBA(0, pixels);

    var bitmap = convertImage(pixels, 4, gr.width, gr.height);

    sendBitmap(bitmap);
  };

  var xhrTimeout = setTimeout(function() {
    sendMessage({"message":"Error : Timeout"}, null, null);
  }, DOWNLOAD_TIMEOUT);

  xhr.send(null);
}

function getJpegImage(url, cachedBitmapKey) {
    var j = new JpegImage();
    j.onload = function () {
        clearTimeout(xhrTimeout); // got response, no more need in timeout

        sendMessage({ "message": "Formatting Image" }, null, null);

        if (j.width > 500 || j.height > 500) {
            sendMessage({ "message": "Large Image Detected" }, null, null);
        }

        var pixels = j.getData(j.width, j.height);
        var bitmap = convertImage(pixels, 3, j.width, j.height);

        // Cache the bitmap for future use
        localStorage.setItem(cachedBitmapKey, JSON.stringify(bitmap));

        sendBitmap(bitmap);
    };

    var xhrTimeout = setTimeout(function () {
        sendMessage({ "message": "Error : Timeout" }, null, null);
    }, DOWNLOAD_TIMEOUT);

    try {
        j.load(url);
    } catch (e) {
        // console.log("Error : " + e);
    }
}

function getPngImage(url){
  var xhr = new XMLHttpRequest();
  xhr.open("GET", url, true);
  xhr.responseType = "arraybuffer";
  xhr.onload = function() {
    clearTimeout(xhrTimeout); // got response, no more need in timeout

    sendMessage({"message":"Formatting Image"}, null, null);

    //MessageQueue.sendAppMessage({"message":"Decoding image..."}, null, null);

    var data = new Uint8Array(xhr.response || xhr.mozResponseArrayBuffer);

    var png     = new PNG(data);
    var width   = png.width;
    var height  = png.height;
    var palette = png.palette;
    var pixels  = png.decodePixels();
    var bitmap  = [];

    if(palette.length > 0){
      var png_arr = [];
      for(var i=0; i<pixels.length; i++) {
        png_arr.push(palette[3*pixels[i]+0] & 0xFF);
        png_arr.push(palette[3*pixels[i]+1] & 0xFF);
        png_arr.push(palette[3*pixels[i]+2] & 0xFF);
      }
      bitmap = convertImage(png_arr, 3, width, height);
    }
    else {
      var components = pixels.length /( width*height);
      bitmap = convertImage(pixels, components, width, height);
    }

    sendBitmap(bitmap);
  };

  var xhrTimeout = setTimeout(function() {
    sendMessage({"message":"Error : Timeout"}, null, null);
  }, DOWNLOAD_TIMEOUT);

  xhr.send(null);
}

function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
}

function getImage(url) {
    // console.log("Image URL : " + url);
    sendMessage({ "message": "Downloading image..." }, null, null);

    // Check if a cached bitmap exists for the given URL
    var cachedBitmapKey = "cachedBitmap_" + url; // Replaced template literal with string concatenation
    var cachedBitmap = localStorage.getItem(cachedBitmapKey);

    if (cachedBitmap) {
        // console.log("Using cached bitmap for URL: " + url);
        var bitmap = JSON.parse(cachedBitmap);
        sendBitmap(bitmap);
        return;
    }

    // If no cached bitmap, proceed to download and process the image
    if (endsWith(url, ".jpg") || endsWith(url, ".jpeg") || endsWith(url, ".JPG") || endsWith(url, ".JPEG")) {
        getJpegImage(url, cachedBitmapKey);
    } else {
        getJpegImage(url, cachedBitmapKey);
    }
}

Pebble.addEventListener("ready", function(e) {
  // console.log("Ready to go!");  
	//console.log("background : "+ options.background);
});

Pebble.addEventListener("appmessage", function(e) {
  getImage(options.url);
});

function sendMessage(data, success, failure) {
  Pebble.sendAppMessage(
    data,
    function(e) {
       //console.log("Successfully delivered message with transactionId=" + e.data.transactionId);
      if(success)
        success();
    },
    function(e) {
      //console.log("Unable to deliver message with transactionId=" + e.data.transactionId + " Error is: " + e.error.message);
      if(failure)
          failure();
    });
}

Pebble.addEventListener('showConfiguration', function(e) {
	var uri = 'http://dezign999.com/crop/999.html';
  Pebble.openURL(uri);
});

Pebble.addEventListener('webviewclosed', function(e) {	
    if (e.response) {
        options = JSON.parse(decodeURIComponent(e.response));
        returnConfigToPebble();
        localStorage.setItem('options', JSON.stringify(options));

        // Check if the URL has changed
        if (options.url != oldurl || options.url == 0) {
            // Clear the cached bitmap for the old URL
            var cachedBitmapKey = "cachedBitmap_" + oldurl; // Fixed template literal usage
            localStorage.removeItem(cachedBitmapKey);

            // Download and process the new image
            getImage(options.url);

            // Update the old URL in localStorage
            localStorage.setItem('oldurl', JSON.stringify(options.url));
            oldurl = JSON.parse(localStorage.getItem('oldurl'));
        }

        // Update the old URL in localStorage regardless
        localStorage.setItem('oldurl', JSON.stringify(options.url));
    }
});

function returnConfigToPebble() {
	//console.log("Configuration window returned: " + JSON.stringify(options));
	if (options.url == oldurl) {
		var hide = 1;
		Pebble.sendAppMessage({
			"background":parseInt(options.background),
			"info":parseInt(options.info),
			"hourlyvibe":parseInt(options.hourlyvibe),
			"vibe_start":parseInt(options.vibe_start),
			"vibe_end":parseInt(options.vibe_end),
			"hide":parseInt(hide)
		}); 
	}	
	
	if (options.url != oldurl) {
		Pebble.sendAppMessage({
			"background":parseInt(options.background),
			"info":parseInt(options.info),
			"hourlyvibe":parseInt(options.hourlyvibe),
			"vibe_start":parseInt(options.vibe_start),
			"vibe_end":parseInt(options.vibe_end),
		}); 
	}
//console.log("background : "+ options.background);
}